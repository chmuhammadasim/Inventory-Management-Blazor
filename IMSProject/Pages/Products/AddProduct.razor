@page "/addproduct"
@inject IAddProductUseCase AddProductUseCase
@inject NavigationManager NavigationManager
<h3>AddProduct</h3>
<br />

@if (this.product != null)
{
    <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control" ></InputText>
        </div>
        <div class="form-group">
            <label for="qty">Product Quantity</label>
            <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="price">Product Price</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>
            <br />
        <ProductInventoriesComponent @ref="ProductInventoriesComponent" OnInventorySeleted="OnInventorySelected"></ProductInventoriesComponent>
            <br />
            <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}
@code {
    private Product? product;
    private ProductInventoriesComponent ProductInventoriesComponent;

    protected override void OnInitialized()
    {
        this.product = new Product();
    }
    private async Task OnValidSubmit()
    {
        if (this.product != null)
        {
            this.ProductInventoriesComponent.ProductInventories.ForEach(x =>
            {
                x.ProductId = this.product.ProductId;
            });
            this.product.ProductInventories = this.ProductInventoriesComponent.ProductInventories;  
            await AddProductUseCase.ExecuteAsync(this.product);
            NavigationManager.NavigateTo("/productlist");
        }
    }
    private void OnInventorySelected(List<ProductInventory> productInventories)
    {
        this.product.ProductInventories = productInventories;
    }
}
