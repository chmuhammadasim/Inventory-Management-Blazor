@page "/productedit/{ProId:int}"

@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager
<h3>Edit Product</h3>


@if (this.product != null)
{
        <EditForm Model="product" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Product Name</label>
            <InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="qty">Product Quantity</label>
            <InputNumber id="qty" @bind-Value="product.Quantity" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="price">Product Price</label>
            <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
        </div>
        <br />
        <ProductInventoriesComponent  OnInventorySeleted="OnProductSelected" ProductInventories="product.ProductInventories"></ProductInventoriesComponent>
        <br />
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm> 
}
@code {
    private Product? product;

    [Parameter]
    public int ProId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        this.product = await ViewProductByIdUseCase.ExecuteAsync(ProId);
    }
    private void OnProductSelected(List<ProductInventory> productInventories)
    {
        this.product.ProductInventories = productInventories;
    }
    public void OnValidSubmit()
    {
        EditProductUseCase.ExecuteAsync(this.product);
        NavigationManager.NavigateTo("/productlist");
    }
}
